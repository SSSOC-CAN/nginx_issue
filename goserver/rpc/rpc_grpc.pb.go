// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcServiceClient is the client API for RpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcServiceClient interface {
	SubscribeDataStream(ctx context.Context, in *SubscribeDataRequest, opts ...grpc.CallOption) (RpcService_SubscribeDataStreamClient, error)
}

type rpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcServiceClient(cc grpc.ClientConnInterface) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) SubscribeDataStream(ctx context.Context, in *SubscribeDataRequest, opts ...grpc.CallOption) (RpcService_SubscribeDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RpcService_ServiceDesc.Streams[0], "/rpc.RpcService/SubscribeDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcServiceSubscribeDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RpcService_SubscribeDataStreamClient interface {
	Recv() (*RealTimeData, error)
	grpc.ClientStream
}

type rpcServiceSubscribeDataStreamClient struct {
	grpc.ClientStream
}

func (x *rpcServiceSubscribeDataStreamClient) Recv() (*RealTimeData, error) {
	m := new(RealTimeData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcServiceServer is the server API for RpcService service.
// All implementations must embed UnimplementedRpcServiceServer
// for forward compatibility
type RpcServiceServer interface {
	SubscribeDataStream(*SubscribeDataRequest, RpcService_SubscribeDataStreamServer) error
	mustEmbedUnimplementedRpcServiceServer()
}

// UnimplementedRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRpcServiceServer struct {
}

func (UnimplementedRpcServiceServer) SubscribeDataStream(*SubscribeDataRequest, RpcService_SubscribeDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeDataStream not implemented")
}
func (UnimplementedRpcServiceServer) mustEmbedUnimplementedRpcServiceServer() {}

// UnsafeRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcServiceServer will
// result in compilation errors.
type UnsafeRpcServiceServer interface {
	mustEmbedUnimplementedRpcServiceServer()
}

func RegisterRpcServiceServer(s grpc.ServiceRegistrar, srv RpcServiceServer) {
	s.RegisterService(&RpcService_ServiceDesc, srv)
}

func _RpcService_SubscribeDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcServiceServer).SubscribeDataStream(m, &rpcServiceSubscribeDataStreamServer{stream})
}

type RpcService_SubscribeDataStreamServer interface {
	Send(*RealTimeData) error
	grpc.ServerStream
}

type rpcServiceSubscribeDataStreamServer struct {
	grpc.ServerStream
}

func (x *rpcServiceSubscribeDataStreamServer) Send(m *RealTimeData) error {
	return x.ServerStream.SendMsg(m)
}

// RpcService_ServiceDesc is the grpc.ServiceDesc for RpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeDataStream",
			Handler:       _RpcService_SubscribeDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
